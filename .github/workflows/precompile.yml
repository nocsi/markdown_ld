name: Precompile NIFs

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 0.4.1)"
        required: true
        default: "0.4.1"

permissions:
  contents: write

jobs:
  precompile:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    env:
      CRATE: markdown_ld_nif
      APP: markdown_ld

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set release version
        id: ver
        shell: bash
        run: |
          V="${{ inputs.version }}"
          echo "version=$V" >> $GITHUB_OUTPUT

      - name: Setup BEAM
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.15'
          otp-version: '26'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build NIF (Linux via cross, others via cargo)
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ matrix.os }}" == ubuntu-* ]]; then
            # Install and use cross for reliable cross-compilation on Linux targets
            cargo install cross --git https://github.com/cross-rs/cross --locked
            cd native/${CRATE}
            cross build --release --target ${{ matrix.target }}
            cd -
          else
            cd native/${CRATE}
            cargo build --release --target ${{ matrix.target }}
            cd -
          fi
          case "${{ matrix.target }}" in
            *windows-msvc) EXT=dll; ART="${CRATE}.dll" ;;
            *apple-darwin) EXT=dylib; ART="lib${CRATE}.dylib" ;;
            *) EXT=so; ART="lib${CRATE}.so" ;;
          esac
          SRC=native/${CRATE}/target/${{ matrix.target }}/release/$ART
          PKG=${CRATE}-v${{ steps.ver.outputs.version }}-${{ matrix.target }}.tar.gz
          mkdir -p out
          tar -czf out/$PKG -C native/${CRATE}/target/${{ matrix.target }}/release $ART
          echo "PKG=out/$PKG" >> $GITHUB_ENV

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.ver.outputs.version }}
          files: ${{ env.PKG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
