name: Precompile NIFs

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 0.4.0)"
        required: true
        default: "0.4.0"
  release:
    types: [published]

jobs:
  precompile:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    env:
      CRATE: markdown_ld_nif
      APP: markdown_ld

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set release version
        id: ver
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Strip leading 'v' if present
            V="${GITHUB_REF_NAME#v}"
          else
            V="${{ inputs.version }}"
          fi
          echo "version=$V" >> $GITHUB_OUTPUT

      - name: Setup BEAM
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.15'
          otp-version: '26'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Linux prerequisites
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          case "${{ matrix.target }}" in
            *musl*) sudo apt-get install -y musl-tools ;;
          esac
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu) sudo apt-get install -y gcc-aarch64-linux-gnu ;; 
            aarch64-unknown-linux-musl) sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu ;; 
          esac

      - name: Precompile and upload (rustler_precompiled action)
        uses: philss/rustler-precompiled@v1
        with:
          app: ${{ env.APP }}
          crate: ${{ env.CRATE }}
          version: ${{ steps.ver.outputs.version }}
          target: ${{ matrix.target }}
          base-url: https://github.com/nocsi/markdown_ld/releases/download/v${{ steps.ver.outputs.version }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # If you prefer manual packaging, uncomment the steps below and remove the action above.
      # - name: Build NIF (manual)
      #   shell: bash
      #   run: |
      #     cd native/${{ env.CRATE }}
      #     cargo build --release --target ${{ matrix.target }}
      #     cd -
      #     # Determine artifact extension
      #     case "${{ matrix.target }}" in
      #       *windows-msvc) EXT=dll ;;
      #       *apple-darwin) EXT=dylib ;;
      #       *) EXT=so ;;
      #     esac
      #     ART=lib${{ env.CRATE }}.$EXT
      #     SRC=native/${{ env.CRATE }}/target/${{ matrix.target }}/release/$ART
      #     PKG=${{ env.CRATE }}-v${{ steps.ver.outputs.version }}-${{ matrix.target }}.tar.gz
      #     mkdir -p out && tar -czf out/$PKG -C native/${{ env.CRATE }}/target/${{ matrix.target }}/release $ART
      #     echo "PKG=out/$PKG" >> $GITHUB_ENV

      # - name: Upload to release (manual)
      #   if: github.event_name == 'release'
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ github.event.release.upload_url }}
      #     asset_path: ${{ env.PKG }}
      #     asset_name: ${{ env.CRATE }}-v${{ steps.ver.outputs.version }}-${{ matrix.target }}.tar.gz
      #     asset_content_type: application/gzip

